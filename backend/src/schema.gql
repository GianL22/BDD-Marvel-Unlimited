# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CreditCard {
  cardNumber: String!
  last4Digits: Int!
}

type Membership {
  id: ID!
  price: Float!
  type: String!
  description: String!
}

type Suscription {
  userId: ID!
  membershipId: ID!
  dateSuscription: DateTime!
  dateEnd: DateTime!
  isActive: Boolean!
  user: User!
  membership: Membership!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Country {
  description: String!
  cities: [City!]!
}

type City {
  id: ID!
  description: String!
  country: Country!
}

type User {
  id: ID!
  username: String!
  name: String!
  lastName: String!
  email: String!
  birthdate: String!
  isActive: Boolean!
  creditCard: CreditCard!
  city: City!
  profiles: [Profile!]!
  membership: Membership!
}

type Profile {
  id: ID!
  userId: ID!
  nickname: String!
  language: String!
  hourConexion: Int!
  device: String!
  timeWatched: Int!
  emailProfile: String!
  avatar: String!
  isActive: Boolean!
}

type AuthResponse {
  token: String!
  user: User!
}

type Medio {
  id: ID!
  companyProduction: Company!
}

type VideoGame {
  medioId: ID!
  medio: Medio!
  title: String!
  releaseDate: String!
  synopsis: String!
  based: String!
  type: String!
  companyPublisher: Company!
}

type Company {
  id: ID!
  description: String!
}

type Actor {
  id: ID!
  name: String!
  lastName: String!
}

type AudioVisualType {
  id: ID!
  description: String!
}

type Serie {
  medioId: ID!
  medio: Medio!
  title: String!
  releaseDate: String!
  synopsis: String!
  based: String!
  channel: String!
  episodes: String!
  creator: Creator!
  audioVisualType: AudioVisualType!
}

type Creator {
  id: ID!
  name: String!
  lastName: String!
}

type Movie {
  medioId: ID!
  medio: Medio!
  title: String!
  releaseDate: String!
  synopsis: String!
  duration: Int!
  based: String!
  cost: Float!
  revenue: Float!
  director: Director!
  companyDist: Company!
  audioVisualType: AudioVisualType!
}

type Director {
  id: ID!
  name: String!
  lastName: String!
}

type PersonsResponse {
  actors: [Actor!]
  directors: [Director!]
  creators: [Creator!]
}

type MediaResponse {
  series: [Serie!]
  movies: [Movie!]
  videoGames: [VideoGame!]
=======
type Villain {
  character: Character!
  name: String!
  lastName: String!
  gender: String!
  phrase: String!
  maritialStatus: String!
  firstApparition: String!
  nameVillain: String!
  objective: String!
}

type Hero {
  character: Character!
  name: String!
  lastName: String!
  gender: String!
  phrase: String!
  maritialStatus: String!
  firstApparition: String!
  nameHero: String!
  logo: String!
  archEnemy: Villain!
}

type Civil {
  character: Character!
  name: String!
  lastName: String!
  gender: String!
  phrase: String!
  maritialStatus: String!
  firstApparition: String!
  hero: Hero
  villain: Villain
}

type Character {
  id: ID!
  eyeColor: Color!
  hairColor: Color!
}

type Color {
  id: ID!
  description: String!
}

type CharacterResponse {
  hero: [Hero!]
  villain: [Villain!]
  civil: [Civil!]
}

type Query {
  users: [User!]!
  userById(id: ID!): User!
  userByEmail(email: String!): User!
  profileByUser: [Profile!]!
  countries: [Country!]!
  suscriptionByUser: Suscription!
  memberships: [Membership!]!
  membership(id: String!): Membership!
  revalite: AuthResponse!
  colors: [Color!]!
  findCharacters: CharacterResponse!
  reportSuscription: [Suscription!]!
  persons: PersonsResponse!
  companies: [Company!]!
  media: MediaResponse!
  AudioVisualTypes: [AudioVisualType!]!
  serie(id: String!): Serie!
  movie(id: String!): Movie!
  videoGame(id: String!): VideoGame!
}

type Mutation {
  updateUser(updateUserInput: UpdateUserInput!): User!
  blockUser(id: ID!): User!
  createProfile(createProfileInput: CreateProfileInput!): Profile!
  updateProfile(updateProfileInput: UpdateProfileInput!): Profile!
  blockProfile(id: ID!): Profile!
  createSuscription(createSuscriptionInput: CreateSuscriptionInput!): Suscription!
  changeSuscription(createSuscriptionInput: CreateSuscriptionInput!): Suscription!
  createMembership(createMembershipInput: CreateMembershipInput!): Membership!
  removeMembership(id: String!): Membership!
  signup(signupInput: SignupInput!, creditCardInput: CreateCreditCardInput!, suscriptionInput: CreateSuscriptionInput!): AuthResponse!
  login(loginInput: LoginInput!): AuthResponse!
  createCreditCard(createCreditCardInput: CreateCreditCardInput!): CreditCard!

  createDirector(createPersonInput: CreatePersonInput!): Director!
  createCreator(createPersonInput: CreatePersonInput!): Creator!
  createActor(createPersonInput: CreatePersonInput!): Actor!
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  createSerie(createSerieInput: CreateSerieInput!): Serie!
  createMovie(createMovieInput: CreateMovieInput!): Movie!
  createVideoGame(createVideoGame: CreateVideoGameInput!): VideoGame!
  createAudioVisualType(createAudioVisualTypeInput: CreateAudioVisualTypeInput!): AudioVisualType!
  removeMedia(id: String!): Medio!
  createColor(createColorInput: CreateColorInput!): Color!
  createVillain(createVillainInput: CreateVillainInput!, createCharacterInput: CreateCharacterInput!): Villain!
  createHero(createHeroInput: CreateHeroInput!, createCharacterInput: CreateCharacterInput!): Hero!
  createCivil(createCivilInput: CreateCivilInput!, createCharacterInput: CreateCharacterInput!): Civil!
  updateHero(updateHeroInput: UpdateHeroInput!): Hero!
  updateVillain(updateVillainInput: UpdateVillainInput!): Villain!
  updateCivil(updateCivilInput: UpdateCivilInput!): Civil!
  removeCharacter(id: ID!): Boolean!

}

input UpdateUserInput {
  username: String
  name: String
  lastName: String
  email: String
  password: String
  birthdate: String
  id: ID!
  isActive: Boolean
}

input CreateProfileInput {
  nickname: String!
  language: String!
  device: String!
  emailProfile: String!
  avatar: String!
}

input UpdateProfileInput {
  nickname: String
  language: String
  device: String
  emailProfile: String
  avatar: String
  id: ID!
  isActive: Boolean
  hourConexion: Int
  timeWatched: Int
}

input CreateSuscriptionInput {
  membership: ID!
  dateSuscription: String!
}

input CreateMembershipInput {
  price: Float!
  type: TypeMemberships!
  description: String!
}

enum TypeMemberships {
  Gold
  Premium
  VIP
}

input SignupInput {
  username: String!
  name: String!
  lastName: String!
  email: String!
  password: String!
  birthdate: String!
  city: ID!
}

input CreateCreditCardInput {
  cardNumber: String!
  ownerName: String!
  ownerLastName: String!
  expiration: String!
  cvv: Int!
}

input LoginInput {
  email: String!
  password: String!
}

input CreatePersonInput {
  name: String!
  lastName: String!
}

input CreateCompanyInput {
  description: String!
}

input CreateSerieInput {
  title: String!
  companyId: ID!
  synopsis: String!
  based: String!
  releaseDate: String!
  channel: String!
  episodes: Int!
  creatorId: ID!
  audioVisualTypeId: ID!
}

input CreateMovieInput {
  title: String!
  companyId: ID!
  synopsis: String!
  based: String!
  releaseDate: String!
  duration: Int!
  cost: Float!
  revenue: Float!
  directorId: ID!
  audioVisualTypeId: ID!
  companyDistId: ID!
}

input CreateVideoGameInput {
  title: String!
  companyId: ID!
  synopsis: String!
  based: String!
  releaseDate: String!
  type: String!
  companyPublisherId: ID!
}

input CreateAudioVisualTypeInput {
  description: String!
=======
input CreateColorInput {
  """Se guarda el nombre del color"""
  description: String!
}

input CreateVillainInput {
  name: String!
  lastName: String!
  gender: TypeGender!
  phrase: String!
  maritialStatus: TypeMaritialStatus!
  firstApparition: String!
  nameVillain: String!
  objective: String!
}

enum TypeGender {
  M
  F
  Desc
  Otro
}

enum TypeMaritialStatus {
  Soltero
  Casado
  Viudo
  Divorcio
}

input CreateCharacterInput {
  eyeColor: String!
  hairColor: String!
}

input CreateHeroInput {
  name: String!
  lastName: String!
  gender: TypeGender!
  phrase: String!
  maritialStatus: TypeMaritialStatus!
  firstApparition: String!
  nameHero: String!
  logo: String!
  archEnemy: String!
}

input CreateCivilInput {
  name: String!
  lastName: String!
  gender: TypeGender!
  phrase: String!
  maritialStatus: TypeMaritialStatus!
  firstApparition: String!
  heroId: String
  villainId: String
}

input UpdateHeroInput {
  name: String
  lastName: String
  gender: TypeGender
  phrase: String
  maritialStatus: TypeMaritialStatus
  firstApparition: String
  nameHero: String
  logo: String
  archEnemy: String
  id: ID!
  eyeColor: String
  hairColor: String
}

input UpdateVillainInput {
  name: String
  lastName: String
  gender: TypeGender
  phrase: String
  maritialStatus: TypeMaritialStatus
  firstApparition: String
  nameVillain: String
  objective: String
  id: ID!
  eyeColor: ID
  hairColor: ID
}

input UpdateCivilInput {
  name: String
  lastName: String
  gender: TypeGender
  phrase: String
  maritialStatus: TypeMaritialStatus
  firstApparition: String
  heroId: String
  villainId: String
  id: ID!
  eyeColor: ID
  hairColor: ID
}